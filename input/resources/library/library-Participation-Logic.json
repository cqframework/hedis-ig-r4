{
  "resourceType": "Library",
  "id": "library-Participation-Logic",
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-Participation-Logic</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>Library/library-FHIRHelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"6\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library Participation_Logic version '1.0.0'\n\nusing FHIR version '4.0.0'\n\ninclude FHIRHelpers version '4.0.0' called FHIRHelpers\n\n//valueset &quot;NCQA Payer&quot;: 'http://ncqa.org/fhir/hedis/ValueSet/ncqa-payer' //'urn:oid:2.16.840.1.113762.1.4.1165.42'\n//valueset &quot;Commercial&quot;: 'http://ncqa.org/hedis/ValueSet/2.16.840.1.113762.1.4.1165.46'\n//valueset &quot;Medicaid&quot;: 'http://ncqa.org/hedis/ValueSet/2.16.840.1.113762.1.4.1165.45'\n//valueset &quot;Medicare&quot;: 'http://ncqa.org/hedis/ValueSet/2.16.840.1.113762.1.4.1165.44'\n\ncontext Patient\n\ndefine &quot;Medicaid Product&quot;:\n\t'medicaid'\n\ndefine &quot;Commercial Product&quot;:\n\t'commercial'\n\ndefine &quot;Medicare Product&quot;:\n\t'medicare'\n\n/*\n  Report in the product line based on which product they are enrolled in at a given date\n\t(generally the end of the measurement period) but continuous enrollment calculations\n\tshould consider all participation periods, regardless of product\n\n\tInput parameters:\n\t\tProduct Line: The product line being reported\n\t\tIndex Date: Generally measurement period, but could be tied to an event\n\t\tParticipation Period: Generally one year, two years, or twenty seven months, but could be based on an event\n\t\tAllowed Gap Days: Generally 45 days, but could be 0\n\n\tExample 1 - One year continuously enrolled\n\t\t&quot;Is Enrolled&quot;(ProductLine, end of &quot;Measurement Period&quot;, &quot;Measurement Period&quot;, 45)\n\n\tExample 2 - Two years continuously enrolled\n\t  &quot;Is Enrolled&quot;(ProductLine, end of &quot;Measurement Period&quot;, Interval[start of &quot;Measurement Period&quot; - 1 year, end of &quot;Measurement Period&quot;], 45)\n\n\tExample 3 - Twenty seven months continuously enrolled\n\t\t&quot;Is Enrolled&quot;(ProductLine, end of &quot;Measurement Period&quot;, Interval[start of &quot;Measurement Period&quot; - 2 years - 3 months, end of &quot;Measurement Period&quot;], 45)\n\n\tExample 4 - Continuously enrolled surrounding an index event such as a heart attack\n\t\t&quot;Is Enrolled&quot;(ProductLine, &quot;Date of Heart Attack&quot;, Interval[&quot;Date of Heart Attack&quot;, &quot;Date of Heart Attack&quot; + 18 months], 45)\n\n\tExample 5 - Continuously enrolled with no gaps during the 9 months prior to a birth and for the following year, allowing for a gap\n\t  &quot;Is Enrolled&quot;(ProductLine, &quot;Date Of Delivery&quot;, Interval[&quot;Date Of Delivery&quot; - 9 months, &quot;Date Of Delivery&quot;], 0)\n\t\t  and &quot;Is Enrolled&quot;(ProductLine, &quot;Date Of Delivery&quot;, Interval[&quot;Date Of Delivery&quot;, &quot;Date Of Delivery&quot; + 1 year], 45)\n*/\ndefine function &quot;Is Enrolled&quot;(ProductLine String, IndexDate DateTime, ParticipationPeriod Interval&lt;DateTime&gt;, AllowedGapDays Integer):\n\tcase\n\t\t/* If this is not running for a specific product line, ignore enrollment considerations */\n\t\twhen ProductLine is null then true\n\t\telse\n\t\t\t/* Is the patient enrolled in the given product line on the given index date? */\n\t\t\t&quot;Is Enrolled On Date&quot;(ProductLine, IndexDate)\n\t\t\t/* Is the patient continuously enrolled in every year of the participation period */\n\t\t\t  and AllTrue(\n\t\t\t\t\t\t(&quot;Enrollment Periods&quot;(ParticipationPeriod)) EnrollmentPeriod\n\t\t\t\t\t\t\treturn &quot;Is Continuously Enrolled In Period&quot;(EnrollmentPeriod, if duration in months of EnrollmentPeriod &gt;= 6 then AllowedGapDays else 0)\n\t\t\t\t\t)\n\tend\n\n/*\nReturns all Commercial, Medicaid, and Medicare participation for the patient\n*/\ndefine &quot;Participation&quot;:\n  [&quot;Coverage&quot;/*: type in &quot;Commercial&quot;*/]\n\t  union [&quot;Coverage&quot;/*: type in &quot;Medicaid&quot;*/]\n\t\tunion [&quot;Coverage&quot;/*: type in &quot;Medicare&quot;*/]\n\ndefine function &quot;Is Enrolled On Date&quot;(ProductLine String, IndexDate DateTime):\n  exists (\n\t\t(\n\t\t\tcase ProductLine\n\t\t\t  when &quot;Commercial Product&quot; then [&quot;Coverage&quot;/*: type in &quot;Commercial&quot;*/]\n\t\t\t\twhen &quot;Medicare Product&quot; then [&quot;Coverage&quot;/*: type in &quot;Medicare&quot;*/]\n\t\t\t\twhen &quot;Medicaid Product&quot; then [&quot;Coverage&quot;/*: type in &quot;Medicaid&quot;*/]\n\t\t\t\telse null\n\t\t\tend\n\t\t) P\n\t\t\twhere IndexDate during P.period\n\t)\n\n/*\nReturns enrollment periods of up to a year ending at the end of the participation period.\nNote that this will not return more than 3 years (would need the expand from 1.3 to support more generally)\n\nFor example, given the following participation period:\n\n        10/1/16 1/1/17       1/1/18      12/31/18\n            [---||------------||------------]\n\nThe function will return the following enrollment periods:\n\n            [---][------------][------------]\n\nIn values:\nParticipation Period: Interval[@2016-10-01, @2018-12-31]\nEnrollment Periods: { Interval[@2016-10-01, @2016-12-31], Interval[@2017-01-01, @2017-12-31] Interval[@2018-01-01, @2018-12-31] }\n*/\ndefine function &quot;Enrollment Periods&quot;(ParticipationPeriod Interval&lt;DateTime&gt;):\n  ( { 3 years, 2 years, 1 year } ) Year\n\t  where end of ParticipationPeriod - (Year - 1 year) after start of ParticipationPeriod\n\t  return\n\t\t  Interval[\n\t\t    Max({ successor of (end of ParticipationPeriod - Year), start of ParticipationPeriod }),\n\t\t\t\tend of ParticipationPeriod - (Year - 1 year)\n\t\t\t]\n\n/*\n//Tests:\ndefine TestTwentySevenMonthParticipationPeriod: Interval[@2016-10-01, @2018-12-31]\ndefine TestExpectedTwentySevenMonthEnrollmentPeriods: { Interval[@2016-10-01, @2016-12-31], Interval[@2017-01-01, @2017-12-31], Interval[@2018-01-01, @2018-12-31] }\ndefine TestTwentySevenMonthEnrollmentPeriods: &quot;Enrollment Periods&quot;(TestTwentySevenMonthParticipationPeriod)\ndefine TestTwentySevenMonthPass: TestTwentySevenMonthEnrollmentPeriods = TestExpectedTwentySevenMonthEnrollmentPeriods\n\ndefine TestThreeYearParticipationPeriod: Interval[@2016-01-01, @2018-12-31]\ndefine TestExpectedThreeYearEnrollmentPeriods: { Interval[@2016-01-01, @2016-12-31], Interval[@2017-01-01, @2017-12-31], Interval[@2018-01-01, @2018-12-31] }\ndefine TestThreeYearEnrollmentPeriods: &quot;Enrollment Periods&quot;(TestThreeYearParticipationPeriod)\ndefine TestThreeYearPass: TestThreeYearEnrollmentPeriods = TestExpectedThreeYearEnrollmentPeriods\n\ndefine TestTwoYearParticipationPeriod: Interval[@2017-01-01, @2018-12-31]\ndefine TestExpectedTwoYearEnrollmentPeriods: { Interval[@2017-01-01, @2017-12-31], Interval[@2018-01-01, @2018-12-31] }\ndefine TestTwoYearEnrollmentPeriods: &quot;Enrollment Periods&quot;(TestTwoYearParticipationPeriod)\ndefine TestTwoYearPass: TestTwoYearEnrollmentPeriods = TestExpectedTwoYearEnrollmentPeriods\n\ndefine TestOneYearParticipationPeriod: Interval[@2018-01-01, @2018-12-31]\ndefine TestExpectedOneYearEnrollmentPeriods: { Interval[@2018-01-01, @2018-12-31] }\ndefine TestOneYearEnrollmentPeriods: &quot;Enrollment Periods&quot;(TestOneYearParticipationPeriod)\ndefine TestOneYearPass: TestOneYearEnrollmentPeriods = TestExpectedOneYearEnrollmentPeriods\n\ndefine TestNineMonthParticipationPeriod: Interval[@2018-03-01, @2018-12-31]\ndefine TestExpectedNineMonthEnrollmentPeriods: { Interval[@2018-03-01, @2018-12-31] }\ndefine TestNineMonthEnrollmentPeriods: &quot;Enrollment Periods&quot;(TestNineMonthParticipationPeriod)\ndefine TestNineMonthPass: TestNineMonthEnrollmentPeriods = TestExpectedNineMonthEnrollmentPeriods\n*/\n\n/*\nReturns the periods during which the patient had coverage during the given participation period\n*/\ndefine function &quot;Participation In Period&quot;(ParticipationPeriod Interval&lt;DateTime&gt;):\n\tcollapse (\n\t\tParticipation P\n\t\t\twhere P.period overlaps ParticipationPeriod\n\t\t\treturn all P.period intersect ParticipationPeriod\n\t)\n\n/*\nReturns the number of gap days in the given coverage periods, allowing only one gap.\nIf there is more than one gap, returns the maximum Integer\n*/\ndefine function &quot;Gap Days In Period&quot;(ParticipationPeriod Interval&lt;DateTime&gt;, Periods List&lt;Interval&lt;DateTime&gt;&gt;):\n\t\tcase Count(Periods)\n\t\t\twhen 1 then\n\t\t\t  if Periods[0] starts day of ParticipationPeriod then\n\t\t\t\t  difference in days between end of Periods[0] and end of ParticipationPeriod\n\t\t\t  else if Periods[0] ends day of ParticipationPeriod then\n\t\t\t\t  difference in days between start of ParticipationPeriod and start of Periods[0]\n\t\t\t  else\n\t\t\t\t  maximum Integer\n\t\t\twhen 2 then\n\t\t\t  if Periods[0] starts day of ParticipationPeriod and Periods[1] ends day of ParticipationPeriod then\n\t\t\t\t  difference in days between end of Periods[0] and start of Periods[1]\n\t\t\t  else\n\t\t\t\t  maximum Integer\n\t\t\telse\n\t\t\t  maximum Integer\n\t\tend\n\n/*\n//Tests:\ndefine TestParticipationPeriod: Interval[@2017-01-01, @2017-12-31]\ndefine Test1CoveragePeriods: { Interval[@2017-01-01, @2017-12-31] }\ndefine Test2CoveragePeriods: { Interval[@2017-01-01, @2017-12-15] }\ndefine Test3CoveragePeriods: { Interval[@2017-01-15, @2017-12-31] }\ndefine Test4CoveragePeriods: { Interval[@2017-01-01, @2017-11-15] }\ndefine Test5CoveragePeriods: { Interval[@2017-02-15, @2017-12-31] }\ndefine Test6CoveragePeriods: { Interval[@2017-01-01, @2017-10-15] }\ndefine Test7CoveragePeriods: { Interval[@2017-03-15, @2017-12-31] }\ndefine Test8CoveragePeriods: { Interval[@2017-01-15, @2017-11-15] }\ndefine Test9CoveragePeriods: { Interval[@2017-01-01, @2017-01-14], Interval[@2017-02-15, @2017-12-31] }\ndefine Test10CoveragePeriods: { Interval[@2017-01-01, @2017-01-14], Interval[@2017-03-15, @2017-12-31] }\ndefine Test11CoveragePeriods: { Interval[@2017-01-01, @2017-01-14], Interval[@2017-02-15, @2017-06-14], Interval[@2017-07-15, @2017-12-31] }\ndefine Test1CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test1CoveragePeriods)\ndefine Test2CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test2CoveragePeriods)\ndefine Test3CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test3CoveragePeriods)\ndefine Test4CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test4CoveragePeriods)\ndefine Test5CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test5CoveragePeriods)\ndefine Test6CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test6CoveragePeriods)\ndefine Test7CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test7CoveragePeriods)\ndefine Test8CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test8CoveragePeriods)\ndefine Test9CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test9CoveragePeriods)\ndefine Test10CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test10CoveragePeriods)\ndefine Test11CoverageGap: &quot;Gap Days In Period&quot;(TestParticipationPeriod, Test11CoveragePeriods)\ndefine Test1ExpectedGap: 0\ndefine Test2ExpectedGap: 16\ndefine Test3ExpectedGap: 14\ndefine Test4ExpectedGap: 46\ndefine Test5ExpectedGap: 45\ndefine Test6ExpectedGap: 77\ndefine Test7ExpectedGap: 73\ndefine Test8ExpectedGap: maximum Integer\ndefine Test9ExpectedGap: 32\ndefine Test10ExpectedGap: 60\ndefine Test11ExpectedGap: maximum Integer\n*/\n\ndefine function &quot;Is Continuously Enrolled In Period&quot;(EnrollmentPeriod Interval&lt;DateTime&gt;, AllowedGapDays Integer):\n\t&quot;Gap Days In Period&quot;(EnrollmentPeriod, &quot;Participation In Period&quot;(EnrollmentPeriod)) &lt;= AllowedGapDays\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
  },
  "version": "1.0.0",
  "name": "Participation_Logic",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [
      {
        "system": "http://hl7.org/fhir/codesystem-library-type.html",
        "code": "logic-library"
      }
    ]
  },
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "Library/library-FHIRHelpers"
    }
  ],
  "dataRequirement": [
    {
      "type": "Coverage"
    },
    {
      "type": "Coverage"
    },
    {
      "type": "Coverage"
    },
    {
      "type": "Coverage"
    },
    {
      "type": "Coverage"
    },
    {
      "type": "Coverage"
    }
  ],
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}